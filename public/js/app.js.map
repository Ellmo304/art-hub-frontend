{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/comment.js","js/controllers/comments.js","js/models/exhibition.js","js/controllers/exhibitions.js","js/controllers/galleries.js","js/models/gallery.js","js/controllers/main.js","js/models/review.js","js/controllers/reviews.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Comment","$resource","id","update","method","CommentsNewController","Review","createComment","save","commentsNew","comment","reload","user_id","getPayload","review_id","params","reviewsAll","query","create","Exhibition","ExhibitionsNewController","Gallery","createExhibition","console","log","exhibitionsNew","exhibition","galleriesAll","ExhibitionsIndexController","exhibitionsIndex","all","ExhibitionsShowController","deleteExhibition","exhibitionsShow","$remove","get","ExhibitionsEditController","exhibitionsEdit","$update","GalleriesNewController","createGallery","galleriesNew","gallery","GalleriesIndexController","galleriesIndex","GalleriesShowController","deleteGallery","galleriesShow","GalleriesEditController","galleriesEdit","MainController","$rootScope","logout","protectStates","e","toState","payload","main","isCurrentUser","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","message","$on","ReviewsNewController","createReview","reviewsNew","review","exhibition_id","exhibitionsAll","ReviewsIndexController","reviewsIndex","ReviewsShowController","deleteReview","reviewsShow","deleteComment","thisComment","ReviewsEditController","reviewsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","Number","UsersEditController","usersEdit","currentUser","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('artHub', ['ngResource', 'ui.router', 'satellizer'])\n.constant('API_URL', 'http://localhost:3000/api')\n.config(Auth);\n\nAuth.$inject = [ '$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('artHub')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('artHub')\n.factory('Comment', Comment);\n\nComment.$inject = ['$resource', 'API_URL'];\nfunction Comment($resource, API_URL) {\n  return new $resource(`${API_URL}/comments/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('CommentsNewController', CommentsNewController);\n\n\nCommentsNewController.$inject = ['Comment', 'Review', '$state', '$auth'];\nfunction CommentsNewController(Comment, Review, $state, $auth) {\n  const commentsNew = this;\n  commentsNew.comment = {};\n  commentsNew.comment.user_id = $auth.getPayload().id;\n  commentsNew.comment.review_id = $state.params.id;\n  commentsNew.reviewsAll = Review.query();\n\n  function createComment() {\n    Comment.save(commentsNew.comment, () => {\n      $state.reload();\n    });\n  }\n  commentsNew.create = createComment;\n}\n","angular.module('artHub')\n.factory('Exhibition', Exhibition);\n\nExhibition.$inject = ['$resource', 'API_URL'];\nfunction Exhibition($resource, API_URL) {\n  return new $resource(`${API_URL}/exhibitions/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('ExhibitionsNewController', ExhibitionsNewController)\n.controller('ExhibitionsIndexController', ExhibitionsIndexController)\n.controller('ExhibitionsShowController', ExhibitionsShowController)\n.controller('ExhibitionsEditController', ExhibitionsEditController);\n\n\nExhibitionsNewController.$inject = ['Exhibition', 'Gallery', '$state'];\nfunction ExhibitionsNewController(Exhibition, Gallery, $state) {\n  const exhibitionsNew = this;\n  exhibitionsNew.exhibition = {};\n\n  exhibitionsNew.galleriesAll = Gallery.query();\n\n  function createExhibition() {\n    console.log(exhibitionsNew.exhibition);\n    Exhibition.save(exhibitionsNew.exhibition, () => {\n      $state.go('exhibitionsIndex');\n    });\n  }\n  exhibitionsNew.create = createExhibition;\n}\n\nExhibitionsIndexController.$inject = ['Exhibition'];\nfunction ExhibitionsIndexController(Exhibition) {\n  const exhibitionsIndex = this;\n  exhibitionsIndex.all = Exhibition.query();\n}\n\nExhibitionsShowController.$inject = ['Exhibition', '$state', '$auth'];\nfunction ExhibitionsShowController(Exhibition, $state, $auth) {\n  const exhibitionsShow = this;\n\n  exhibitionsShow.exhibition = Exhibition.get($state.params);\n\n  function deleteExhibition() {\n    exhibitionsShow.exhibition.$remove(() => {\n      $state.go('exhibitionsIndex');\n    });\n  }\n  exhibitionsShow.deleteExhibition = deleteExhibition;\n}\n\n\nExhibitionsEditController.$inject = ['Exhibition', 'Gallery', '$state', '$auth'];\nfunction ExhibitionsEditController(Exhibition, Gallery, $state, $auth) {\n  const exhibitionsEdit = this;\n  exhibitionsEdit.exhibition = Exhibition.get($state.params);\n\n  exhibitionsEdit.galleriesAll = Gallery.query();\n  // Exhibition.get($state.params, (currentExhibition) => {\n  //   exhibitionsEdit.exhibition = currentExhibition;\n  //   if(exhibitionsEdit.exhibition.id !== $auth.getPayload().id) {\n  //     $state.go('login');\n  //   }\n  // });\n\n\n  function update() {\n    exhibitionsEdit.exhibition.$update(() => {\n      $state.go('exhibitionsShow', $state.params);\n    });\n  }\n  exhibitionsEdit.update = update;\n}\n","angular.module('artHub')\n.controller('GalleriesNewController', GalleriesNewController)\n.controller('GalleriesIndexController', GalleriesIndexController)\n.controller('GalleriesShowController', GalleriesShowController)\n.controller('GalleriesEditController', GalleriesEditController);\n\n\nGalleriesNewController.$inject = ['Gallery', '$state'];\nfunction GalleriesNewController(Gallery, $state) {\n  const galleriesNew = this;\n  galleriesNew.gallery = {};\n\n  function createGallery() {\n    Gallery.save(galleriesNew.gallery, () => {\n      $state.go('galleriesIndex');\n    });\n  }\n  galleriesNew.create = createGallery;\n}\n\nGalleriesIndexController.$inject = ['Gallery'];\nfunction GalleriesIndexController(Gallery) {\n  const galleriesIndex = this;\n  galleriesIndex.all = Gallery.query();\n}\n\nGalleriesShowController.$inject = ['Gallery', '$state', '$auth'];\nfunction GalleriesShowController(Gallery, $state, $auth) {\n  const galleriesShow = this;\n\n  galleriesShow.gallery = Gallery.get($state.params);\n\n  function deleteGallery() {\n    galleriesShow.gallery.$remove(() => {\n      $state.go('galleriesIndex');\n    });\n  }\n  galleriesShow.deleteGallery = deleteGallery;\n}\n\n\nGalleriesEditController.$inject = ['Gallery', '$state', '$auth'];\nfunction GalleriesEditController(Gallery, $state, $auth) {\n  const galleriesEdit = this;\n  galleriesEdit.gallery = Gallery.get($state.params);\n  // Gallery.get($state.params, (currentGallery) => {\n  //   galleriesEdit.gallery = currentGallery;\n  //   if(galleriesEdit.gallery.id !== $auth.getPayload().id) {\n  //     $state.go('login');\n  //   }\n  // });\n\n\n  function update() {\n    galleriesEdit.gallery.$update(() => {\n      $state.go('galleriesShow', $state.params);\n    });\n  }\n  galleriesEdit.update = update;\n}\n","angular.module('artHub')\n.factory('Gallery', Gallery);\n\nGallery.$inject = ['$resource', 'API_URL'];\nfunction Gallery($resource, API_URL) {\n  return new $resource(`${API_URL}/galleries/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function protectStates(e, toState) {\n    const payload = $auth.getPayload();\n    if(payload) {\n      main.isCurrentUser = $auth.getPayload().id;\n    }\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', protectStates);\n\n  main.logout = logout;\n}\n","angular.module('artHub')\n.factory('Review', Review);\n\nReview.$inject = ['$resource', 'API_URL'];\nfunction Review($resource, API_URL) {\n  return new $resource(`${API_URL}/reviews/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('ReviewsNewController', ReviewsNewController)\n.controller('ReviewsIndexController', ReviewsIndexController)\n.controller('ReviewsShowController', ReviewsShowController)\n.controller('ReviewsEditController', ReviewsEditController);\n\n\nReviewsNewController.$inject = ['Review', 'Exhibition', '$state', '$auth'];\nfunction ReviewsNewController(Review, Exhibition, $state, $auth) {\n  const reviewsNew = this;\n  reviewsNew.review = {};\n  reviewsNew.review.user_id = $auth.getPayload().id;\n  reviewsNew.review.exhibition_id = $state.params.id;\n  reviewsNew.exhibitionsAll = Exhibition.query();\n\n  function createReview() {\n    Review.save(reviewsNew.review, () => {\n      $state.go('reviewsIndex');\n    });\n  }\n  reviewsNew.create = createReview;\n}\n\nReviewsIndexController.$inject = ['Review'];\nfunction ReviewsIndexController(Review) {\n  const reviewsIndex = this;\n  reviewsIndex.all = Review.query();\n}\n\nReviewsShowController.$inject = ['Review', 'Comment', '$state', '$auth'];\nfunction ReviewsShowController(Review, Comment, $state, $auth) {\n  const reviewsShow = this;\n\n  reviewsShow.review = Review.get($state.params);\n\n  function deleteReview() {\n    reviewsShow.review.$remove(() => {\n      $state.go('reviewsIndex');\n    });\n  }\n\n  function deleteComment(thisComment) {\n    reviewsShow.comment = Comment.get(thisComment);\n    reviewsShow.comment.$remove(() => {\n      $state.reload();\n    });\n  }\n  reviewsShow.deleteComment = deleteComment;\n  reviewsShow.deleteReview = deleteReview;\n}\n\n\nReviewsEditController.$inject = ['Review', 'Exhibition', '$state', '$auth'];\nfunction ReviewsEditController(Review, Exhibition, $state, $auth) {\n  const reviewsEdit = this;\n  reviewsEdit.review = Review.get($state.params);\n  // reviewsEdit.review.user_id = $auth.getPayload().id;\n  // reviewsEdit.review.exhibition_id = $state.params.id;\n  reviewsEdit.exhibitionsAll = Exhibition.query();\n\n  // Review.get($state.params, (currentReview) => {\n  //   reviewsEdit.review = currentReview;\n  //   if(reviewsEdit.review.id !== $auth.getPayload().id) {\n  //     $state.go('login');\n  //   }\n  // });\n\n\n  function update() {\n    reviewsEdit.review.$update(() => {\n      $state.go('reviewsShow', $state.params);\n    });\n  }\n  reviewsEdit.update = update;\n}\n","angular.module('artHub')\n.config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('home', {\n    url: '/',\n    templateUrl: '/templates/home.html'\n  })\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('galleriesNew', {\n    url: '/galleries/new',\n    templateUrl: '/templates/galleries/galleriesNew.html',\n    controller: 'GalleriesNewController as galleriesNew'\n  })\n  .state('galleriesIndex', {\n    url: '/galleries',\n    templateUrl: '/templates/galleries/galleriesIndex.html',\n    controller: 'GalleriesIndexController as galleriesIndex'\n  })\n  .state('galleriesShow', {\n    url: '/galleries/:id',\n    templateUrl: '/templates/galleries/galleriesShow.html',\n    controller: 'GalleriesShowController as galleriesShow'\n  })\n  .state('galleriesEdit', {\n    url: '/galleries/:id/edit',\n    templateUrl: '/templates/galleries/galleriesEdit.html',\n    controller: 'GalleriesEditController as galleriesEdit'\n  })\n  .state('exhibitionsNew', {\n    url: '/exhibitions/new',\n    templateUrl: '/templates/exhibitions/exhibitionsNew.html',\n    controller: 'ExhibitionsNewController as exhibitionsNew'\n  })\n  .state('exhibitionsIndex', {\n    url: '/exhibitions',\n    templateUrl: '/templates/exhibitions/exhibitionsIndex.html',\n    controller: 'ExhibitionsIndexController as exhibitionsIndex'\n  })\n  .state('exhibitionsShow', {\n    url: '/exhibitions/:id',\n    templateUrl: '/templates/exhibitions/exhibitionsShow.html'\n  })\n  .state('exhibitionsEdit', {\n    url: '/exhibitions/:id/edit',\n    templateUrl: '/templates/exhibitions/exhibitionsEdit.html',\n    controller: 'ExhibitionsEditController as exhibitionsEdit'\n  })\n  .state('reviewsNew', {\n    url: '/reviews/new',\n    templateUrl: '/templates/reviews/reviewsNew.html',\n    controller: 'ReviewsNewController as reviewsNew'\n  })\n  .state('reviewsIndex', {\n    url: '/reviews',\n    templateUrl: '/templates/reviews/reviewsIndex.html',\n    controller: 'ReviewsIndexController as reviewsIndex'\n  })\n  .state('reviewsShow', {\n    url: '/reviews/:id',\n    templateUrl: '/templates/reviews/reviewsShow.html'\n    // controller: 'ReviewsShowController as reviewsShow'\n  })\n  .state('reviewsEdit', {\n    url: '/reviews/:id/edit',\n    templateUrl: '/templates/reviews/reviewsEdit.html',\n    controller: 'ReviewsEditController as reviewsEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: 'templates/login.html',\n    controller: 'LoginController as login'\n  });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('artHub')\n.factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n  User.get($state.params, (currentUser) => {\n    usersEdit.user = currentUser;\n    if(usersEdit.user.id !== $auth.getPayload().id) {\n      $state.go('login');\n    }\n  });\n\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}
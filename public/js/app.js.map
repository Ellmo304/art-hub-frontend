{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/exhibition.js","js/controllers/exhibitions.js","js/controllers/galleries.js","js/models/gallery.js","js/controllers/main.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Exhibition","$resource","id","update","method","ExhibitionsNewController","Gallery","createExhibition","console","log","exhibitionsNew","exhibition","save","galleriesAll","query","create","ExhibitionsIndexController","exhibitionsIndex","all","ExhibitionsShowController","deleteExhibition","exhibitionsShow","$remove","get","params","ExhibitionsEditController","exhibitionsEdit","$update","GalleriesNewController","createGallery","galleriesNew","gallery","GalleriesIndexController","galleriesIndex","GalleriesShowController","deleteGallery","galleriesShow","GalleriesEditController","galleriesEdit","MainController","$rootScope","logout","protectStates","e","toState","payload","getPayload","main","isCurrentUser","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","message","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","Number","UsersEditController","usersEdit","currentUser","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('artHub', ['ngResource', 'ui.router', 'satellizer'])\n.constant('API_URL', 'http://localhost:3000/api')\n.config(Auth);\n\nAuth.$inject = [ '$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('artHub')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('artHub')\n.factory('Exhibition', Exhibition);\n\nExhibition.$inject = ['$resource', 'API_URL'];\nfunction Exhibition($resource, API_URL) {\n  return new $resource(`${API_URL}/exhibitions/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('ExhibitionsNewController', ExhibitionsNewController)\n.controller('ExhibitionsIndexController', ExhibitionsIndexController)\n.controller('ExhibitionsShowController', ExhibitionsShowController)\n.controller('ExhibitionsEditController', ExhibitionsEditController);\n\n\nExhibitionsNewController.$inject = ['Exhibition', 'Gallery', '$state'];\nfunction ExhibitionsNewController(Exhibition, Gallery, $state) {\n  const exhibitionsNew = this;\n  exhibitionsNew.exhibition = {};\n\n  exhibitionsNew.galleriesAll = Gallery.query();\n\n  function createExhibition() {\n    console.log(exhibitionsNew.exhibition);\n    Exhibition.save(exhibitionsNew.exhibition, () => {\n      $state.go('exhibitionsIndex');\n    });\n  }\n  exhibitionsNew.create = createExhibition;\n}\n\nExhibitionsIndexController.$inject = ['Exhibition'];\nfunction ExhibitionsIndexController(Exhibition) {\n  const exhibitionsIndex = this;\n  exhibitionsIndex.all = Exhibition.query();\n}\n\nExhibitionsShowController.$inject = ['Exhibition', '$state', '$auth'];\nfunction ExhibitionsShowController(Exhibition, $state, $auth) {\n  const exhibitionsShow = this;\n\n  exhibitionsShow.exhibition = Exhibition.get($state.params);\n\n  function deleteExhibition() {\n    exhibitionsShow.exhibition.$remove(() => {\n      $state.go('exhibitionsIndex');\n    });\n  }\n  exhibitionsShow.deleteExhibition = deleteExhibition;\n}\n\n\nExhibitionsEditController.$inject = ['Exhibition', 'Gallery', '$state', '$auth'];\nfunction ExhibitionsEditController(Exhibition, Gallery, $state, $auth) {\n  const exhibitionsEdit = this;\n  exhibitionsEdit.exhibition = Exhibition.get($state.params);\n\n  exhibitionsEdit.galleriesAll = Gallery.query();\n  // Exhibition.get($state.params, (currentExhibition) => {\n  //   exhibitionsEdit.exhibition = currentExhibition;\n  //   if(exhibitionsEdit.exhibition.id !== $auth.getPayload().id) {\n  //     $state.go('login');\n  //   }\n  // });\n\n\n  function update() {\n    exhibitionsEdit.exhibition.$update(() => {\n      $state.go('exhibitionsShow', $state.params);\n    });\n  }\n  exhibitionsEdit.update = update;\n}\n","angular.module('artHub')\n.controller('GalleriesNewController', GalleriesNewController)\n.controller('GalleriesIndexController', GalleriesIndexController)\n.controller('GalleriesShowController', GalleriesShowController)\n.controller('GalleriesEditController', GalleriesEditController);\n\n\nGalleriesNewController.$inject = ['Gallery', '$state'];\nfunction GalleriesNewController(Gallery, $state) {\n  const galleriesNew = this;\n  galleriesNew.gallery = {};\n\n  function createGallery() {\n    Gallery.save(galleriesNew.gallery, () => {\n      $state.go('galleriesIndex');\n    });\n  }\n  galleriesNew.create = createGallery;\n}\n\nGalleriesIndexController.$inject = ['Gallery'];\nfunction GalleriesIndexController(Gallery) {\n  const galleriesIndex = this;\n  galleriesIndex.all = Gallery.query();\n}\n\nGalleriesShowController.$inject = ['Gallery', '$state', '$auth'];\nfunction GalleriesShowController(Gallery, $state, $auth) {\n  const galleriesShow = this;\n\n  galleriesShow.gallery = Gallery.get($state.params);\n\n  function deleteGallery() {\n    galleriesShow.gallery.$remove(() => {\n      $state.go('galleriesIndex');\n    });\n  }\n  galleriesShow.deleteGallery = deleteGallery;\n}\n\n\nGalleriesEditController.$inject = ['Gallery', '$state', '$auth'];\nfunction GalleriesEditController(Gallery, $state, $auth) {\n  const galleriesEdit = this;\n  galleriesEdit.gallery = Gallery.get($state.params);\n  // Gallery.get($state.params, (currentGallery) => {\n  //   galleriesEdit.gallery = currentGallery;\n  //   if(galleriesEdit.gallery.id !== $auth.getPayload().id) {\n  //     $state.go('login');\n  //   }\n  // });\n\n\n  function update() {\n    galleriesEdit.gallery.$update(() => {\n      $state.go('galleriesShow', $state.params);\n    });\n  }\n  galleriesEdit.update = update;\n}\n","angular.module('artHub')\n.factory('Gallery', Gallery);\n\nGallery.$inject = ['$resource', 'API_URL'];\nfunction Gallery($resource, API_URL) {\n  return new $resource(`${API_URL}/galleries/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function protectStates(e, toState) {\n    const payload = $auth.getPayload();\n    if(payload) {\n      main.isCurrentUser = $auth.getPayload().id;\n    }\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', protectStates);\n\n  main.logout = logout;\n}\n","angular.module('artHub')\n.config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/users/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/users/usersShow.html',\n    controller: 'UsersShowController as usersShow'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/users/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('galleriesNew', {\n    url: '/galleries/new',\n    templateUrl: '/templates/galleries/galleriesNew.html',\n    controller: 'GalleriesNewController as galleriesNew'\n  })\n  .state('galleriesIndex', {\n    url: '/galleries',\n    templateUrl: '/templates/galleries/galleriesIndex.html',\n    controller: 'GalleriesIndexController as galleriesIndex'\n  })\n  .state('galleriesShow', {\n    url: '/galleries/:id',\n    templateUrl: '/templates/galleries/galleriesShow.html',\n    controller: 'GalleriesShowController as galleriesShow'\n  })\n  .state('galleriesEdit', {\n    url: '/galleries/:id/edit',\n    templateUrl: '/templates/galleries/galleriesEdit.html',\n    controller: 'GalleriesEditController as galleriesEdit'\n  })\n  .state('exhibitionsNew', {\n    url: '/exhibitions/new',\n    templateUrl: '/templates/exhibitions/exhibitionsNew.html',\n    controller: 'ExhibitionsNewController as exhibitionsNew'\n  })\n  .state('exhibitionsIndex', {\n    url: '/exhibitions',\n    templateUrl: '/templates/exhibitions/exhibitionsIndex.html',\n    controller: 'ExhibitionsIndexController as exhibitionsIndex'\n  })\n  .state('exhibitionsShow', {\n    url: '/exhibitions/:id',\n    templateUrl: '/templates/exhibitions/exhibitionsShow.html',\n    controller: 'ExhibitionsShowController as exhibitionsShow'\n  })\n  .state('exhibitionsEdit', {\n    url: '/exhibitions/:id/edit',\n    templateUrl: '/templates/exhibitions/exhibitionsEdit.html',\n    controller: 'ExhibitionsEditController as exhibitionsEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: 'templates/login.html',\n    controller: 'LoginController as login'\n  });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('artHub')\n.factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('artHub')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.deleteUser = deleteUser;\n}\n\n\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n  User.get($state.params, (currentUser) => {\n    usersEdit.user = currentUser;\n    if(usersEdit.user.id !== $auth.getPayload().id) {\n      $state.go('login');\n    }\n  });\n\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = update;\n}\n"]}